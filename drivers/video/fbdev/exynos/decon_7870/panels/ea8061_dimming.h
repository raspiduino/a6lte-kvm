/* linux/drivers/video/exynos/decon_7580/panels/s6e3fa2_dimming.h
 *
 * Header file for Samsung AID Dimming Driver.
 *
 * Copyright (c) 2013 Samsung Electronics
 * Minwoo Kim <minwoo7945.kim@samsung.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#ifndef __S6E3FA2_DIMMING_H__
#define __S6E3FA2_DIMMING_H__

#include <linux/types.h>
#include <linux/kernel.h>

/* CAUTION !!!
 * This file was generated by Smart Dimming Header Generation Tool Do not modify manually
 */

struct v_constant {
	int nu;
	int de;
};

enum {
	V0 = 0,
	V3,
	V11,
	V23,
	V35,
	V51,
	V87,
	V151,
	V203,
	V255,
	VMAX
};

#define VT						V0
#define NUM_VREF				VMAX	//10

#define LDI_MODEL				EA8061

#define MAX_BRIGHTNESS			350
#define MAX_GRADATION			256

#define MULTIPLY_VALUE			1024
#define MULTIPLE_VREGOUT		6349		 /*		VREGOUT*MULTIPLY_VALUE	*/
#define DOUBLE_MULTIPLE_VREGOUT	6501171

#define REFERENCE_GAMMA			2
#define MAX_GRAYSCALE			255

#define TBL_INDEX_V0			0
#define TBL_INDEX_V3			3
#define TBL_INDEX_V11			11
#define TBL_INDEX_V23			23
#define TBL_INDEX_V35			35
#define TBL_INDEX_V51			51
#define TBL_INDEX_V87			87
#define TBL_INDEX_V151			151
#define TBL_INDEX_V203			203
#define TBL_INDEX_V255			255


#define OLED_CMD_GAMMA_CNT		33
#define OLED_CMD_ELVSS_CNT		3
#define OLED_CMD_AID_CNT		5
#define OLED_CMD_GAMMA			0xCA

#define MAX_BR_INFO				63

#define HAS_NO_V0_GAMMA

#define dimm_err(fmt, ...)					\
	{							\
		pr_err(pr_fmt(fmt), ##__VA_ARGS__);		\
	}

#define dimm_info(fmt, ...)					\
	{							\
		pr_info(pr_fmt(fmt), ##__VA_ARGS__);		\
	}

#define dimm_dbg(fmt, ...)					\
	{							\
		pr_debug(pr_fmt(fmt), ##__VA_ARGS__);		\
	}

static const unsigned int vref_index[NUM_VREF] = {
	TBL_INDEX_V0,
	TBL_INDEX_V3,
	TBL_INDEX_V11,
	TBL_INDEX_V23,
	TBL_INDEX_V35,
	TBL_INDEX_V51,
	TBL_INDEX_V87,
	TBL_INDEX_V151,
	TBL_INDEX_V203,
	TBL_INDEX_V255,
};

static const int vreg_element_max[NUM_VREF] = {
	0x0f,
	0xff,
	0xff,
	0xff,
	0xff,
	0xff,
	0xff,
	0xff,
	0xff,
	0x1ff,
};


static const struct v_constant vt_fix_const = {
	.nu = 0,
	.de = 605
};

static const struct v_constant fix_const[NUM_VREF] = {
	{.nu = 0,	.de = 605},	//VT
	{.nu = 64,	.de = 320},
	{.nu = 64,	.de = 320},
	{.nu = 64,	.de = 320},
	{.nu = 64,	.de = 320},
	{.nu = 64,	.de = 320},
	{.nu = 64,	.de = 320},
	{.nu = 64,	.de = 320},
	{.nu = 64,	.de = 320},
	{.nu = 46,	.de = 605},	//V255
};

// < precalculated VT volgate * 1024 *1024 >
// DOUBLE_MULTIPLE_VREGOUT * (de_VT - VT voltage hex Value) /de_VT
// VT voltage hex Value's hex value is from table in Base Luminance of Dynamic sheet excel
// MTP VT gamma can be form 0x0 to 0xF

static const unsigned int vt_trans_volt[16] = {
	6501171,	6372221,	6243273,	6114324,	5985376,	5856427,	5727477,	5598529,
	5469580,	5340631,	5018259,	4910801,	4690766,	4803344,	4588430,	4502464,
};

// < precalculated V255 volgate * 1024 *1024 >
// DOUBLE_MULTIPLE_VREGOUT - DOUBLE_MULTIPLE_VREGOUT(256 + MTP V255 gamma +nu_v255) /de_V255
// MTP V255 gamma can be form -256 to +255

static const unsigned int v255_trans_volt[512] = {
	6006867, 5996121, 5985376, 5974630, 5963884, 5953138, 5942393, 5931647, 5920901, 5910155,
	5899410, 5888664, 5877918, 5867173, 5856427, 5845681, 5834935, 5824190, 5813444, 5802698,
	5791952, 5781207, 5770461, 5759715, 5748969, 5738224, 5727478, 5716732, 5705986, 5695241,
	5684495, 5673749, 5663003, 5652258, 5641512, 5630766, 5620021, 5609275, 5598529, 5587783,
	5577038, 5566292, 5555546, 5544800, 5534055, 5523309, 5512563, 5501817, 5491072, 5480326,
	5469580, 5458834, 5448089, 5437343, 5426597, 5415852, 5405106, 5394360, 5383614, 5372869,
	5362123, 5351377, 5340631, 5329886, 5319140, 5308394, 5297648, 5286903, 5276157, 5265411,
	5254665, 5243920, 5233174, 5222428, 5211683, 5200937, 5190191, 5179445, 5168700, 5157954,
	5147208, 5136462, 5125717, 5114971, 5104225, 5093479, 5082734, 5071988, 5061242, 5050496,
	5039751, 5029005, 5018259, 5007514, 4996768, 4986022, 4975276, 4964531, 4953785, 4943039,
	4932293, 4921548, 4910802, 4900056, 4889310, 4878565, 4867819, 4857073, 4846327, 4835582,
	4824836, 4814090, 4803345, 4792599, 4781853, 4771107, 4760362, 4749616, 4738870, 4728124,
	4717379, 4706633, 4695887, 4685141, 4674396, 4663650, 4652904, 4642158, 4631413, 4620667,
	4609921, 4599176, 4588430, 4577684, 4566938, 4556193, 4545447, 4534701, 4523955, 4513210,
	4502464, 4491718, 4480972, 4470227, 4459481, 4448735, 4437989, 4427244, 4416498, 4405752,
	4395007, 4384261, 4373515, 4362769, 4352024, 4341278, 4330532, 4319786, 4309041, 4298295,
	4287549, 4276803, 4266058, 4255312, 4244566, 4233820, 4223075, 4212329, 4201583, 4190838,
	4180092, 4169346, 4158600, 4147855, 4137109, 4126363, 4115617, 4104872, 4094126, 4083380,
	4072634, 4061889, 4051143, 4040397, 4029651, 4018906, 4008160, 3997414, 3986668, 3975923,
	3965177, 3954431, 3943686, 3932940, 3922194, 3911448, 3900703, 3889957, 3879211, 3868465,
	3857720, 3846974, 3836228, 3825482, 3814737, 3803991, 3793245, 3782499, 3771754, 3761008,
	3750262, 3739517, 3728771, 3718025, 3707279, 3696534, 3685788, 3675042, 3664296, 3653551,
	3642805, 3632059, 3621313, 3610568, 3599822, 3589076, 3578330, 3567585, 3556839, 3546093,
	3535348, 3524602, 3513856, 3503110, 3492365, 3481619, 3470873, 3460127, 3449382, 3438636,
	3427890, 3417144, 3406399, 3395653, 3384907, 3374161, 3363416, 3352670, 3341924, 3331179,
	3320433, 3309687, 3298941, 3288196, 3277450, 3266704, 3255958, 3245213, 3234467, 3223721,
	3212975, 3202230, 3191484, 3180738, 3169992, 3159247, 3148501, 3137755, 3127010, 3116264,
	3105518, 3094772, 3084027, 3073281, 3062535, 3051789, 3041044, 3030298, 3019552, 3008806,
	2998061, 2987315, 2976569, 2965823, 2955078, 2944332, 2933586, 2922841, 2912095, 2901349,
	2890603, 2879858, 2869112, 2858366, 2847620, 2836875, 2826129, 2815383, 2804637, 2793892,
	2783146, 2772400, 2761654, 2750909, 2740163, 2729417, 2718672, 2707926, 2697180, 2686434,
	2675689, 2664943, 2654197, 2643451, 2632706, 2621960, 2611214, 2600468, 2589723, 2578977,
	2568231, 2557485, 2546740, 2535994, 2525248, 2514503, 2503757, 2493011, 2482265, 2471520,
	2460774, 2450028, 2439282, 2428537, 2417791, 2407045, 2396299, 2385554, 2374808, 2364062,
	2353316, 2342571, 2331825, 2321079, 2310333, 2299588, 2288842, 2278096, 2267351, 2256605,
	2245859, 2235113, 2224368, 2213622, 2202876, 2192130, 2181385, 2170639, 2159893, 2149147,
	2138402, 2127656, 2116910, 2106164, 2095419, 2084673, 2073927, 2063182, 2052436, 2041690,
	2030944, 2020199, 2009453, 1998707, 1987961, 1977216, 1966470, 1955724, 1944978, 1934233,
	1923487, 1912741, 1901995, 1891250, 1880504, 1869758, 1859013, 1848267, 1837521, 1826775,
	1816030, 1805284, 1794538, 1783792, 1773047, 1762301, 1751555, 1740809, 1730064, 1719318,
	1708572, 1697826, 1687081, 1676335, 1665589, 1654844, 1644098, 1633352, 1622606, 1611861,
	1601115, 1590369, 1579623, 1568878, 1558132, 1547386, 1536640, 1525895, 1515149, 1504403,
	1493657, 1482912, 1472166, 1461420, 1450675, 1439929, 1429183, 1418437, 1407692, 1396946,
	1386200, 1375454, 1364709, 1353963, 1343217, 1332471, 1321726, 1310980, 1300234, 1289488,
	1278743, 1267997, 1257251, 1246506, 1235760, 1225014, 1214268, 1203523, 1192777, 1182031,
	1171285, 1160540, 1149794, 1139048, 1128302, 1117557, 1106811, 1096065, 1085319, 1074574,
	1063828, 1053082, 1042337, 1031591, 1020845, 1010099, 999354,  988608,  977862,  967116,
	956371,  945625,  934879,  924133, 913388, 902642, 891896, 881150, 870405, 859659, 848913,
	838168, 827422, 816676, 805930, 795185, 784439, 773693, 762947, 752202, 741456, 730710,
	719964, 709219, 698473, 687727, 676981, 666236, 655490, 644744, 633998, 623253, 612507,
	601761, 591016, 580270, 569524, 558778, 548033, 537287, 526541, 515795,
};

//pre calculated value for V3 ~ V203
//(MTP gamma value + nu)/du * 1024
//v3~v203 MTP gamma value can be from 0 to 255

static const unsigned int v203_trans_volt[256] = {
	204,	207,	211,	214,	217,	220,	224,	227,
	230,	233,	236,	240,	243,	246,	249,	252,
	256,	259,	262,	265,	268,	271,	275,	278,
	281,	284,	288,	291,	294,	297,	300,	304,
	307,	310,	313,	316,	320,	323,	326,	329,
	332,	335,	339,	342,	345,	348,	352,	355,
	358,	361,	364,	368,	371,	374,	377,	380,
	384,	387,	390,	393,	396,	399,	403,	406,
	409,	412,	416,	419,	422,	425,	428,	432,
	435,	438,	441,	444,	448,	451,	454,	457,
	460,	463,	467,	470,	473,	476,	480,	483,
	486,	489,	492,	496,	499,	502,	505,	508,
	512,	515,	518,	521,	524,	527,	531,	534,
	537,	540,	544,	547,	550,	553,	556,	560,
	563,	566,	569,	572,	576,	579,	582,	585,
	588,	591,	595,	598,	601,	604,	608,	611,
	614,	617,	620,	624,	627,	630,	633,	636,
	640,	643,	646,	649,	652,	655,	659,	662,
	665,	668,	672,	675,	678,	681,	684,	688,
	691,	694,	697,	700,	704,	707,	710,	713,
	716,	719,	723,	726,	729,	732,	736,	739,
	742,	745,	748,	752,	755,	758,	761,	764,
	768,	771,	774,	777,	780,	783,	787,	790,
	793,	796,	800,	803,	806,	809,	812,	816,
	819,	822,	825,	828,	832,	835,	838,	841,
	844,	847,	851,	854,	857,	860,	864,	867,
	870,	873,	876,	880,	883,	886,	889,	892,
	896,	899,	902,	905,	908,	911,	915,	918,
	921,	924,	928,	931,	934,	937,	940,	944,
	947,	950,	953,	956,	960,	963,	966,	969,
	972,	975,	979,	982,	985,	988,	992,	995,
	998,	1001,	1004,	1008,	1011,	1014,	1017,	1020,
};

// (n+1)/(array_size+1)*1024
// between voltage point , values are generated  linear
static const short int_tbl_v0_v3[2] = {
	341,	683,
};


static const short int_tbl_v3_v11[7] = {
	128,	256,	384,	512,	640,	768,	896,
};


static const short int_tbl_v11_v23[11] = {
	85,		171,	256,	341,	427,	512,	597,	683,
	768,	853,	939,
};


static const short int_tbl_v23_v35[11] = {
	85,		171,	256,	341,	427,	512,	597,	683,
	768,	853,	939,
};


static const short int_tbl_v35_v51[15] = {
	64,		128,	192,	256,	320,	384,	448,	512,
	576,	640,	704,	768,	832,	896,	960,
};


static const short int_tbl_v51_v87[35] = {
	28,		57,		85,		114,	142,	171,	199,	228,
	256,	284,	313,	341,	370,	398,	427,	455,
	484,	512,	540,	569,	597,	626,	654,	683,
	711,	740,	768,	796,	825,	853,	882,	910,
	939,	967,	996,
};


static const short int_tbl_v87_v151[63] = {
	16,		32,		48,		64,		80,		96,		112,	128,
	144,	160,	176,	192,	208,	224,	240,	256,
	272,	288,	304,	320,	336,	352,	368,	384,
	400,	416,	432,	448,	464,	480,	496,	512,
	528,	544,	560,	576,	592,	608,	624,	640,
	656,	672,	688,	704,	720,	736,	752,	768,
	784,	800,	816,	832,	848,	864,	880,	896,
	912,	928,	944,	960,	976,	992,	1008,
};


static const short int_tbl_v151_v203[51] = {
	20,		39,		59,		79,		98,		118,	138,	158,
	177,	197,	217,	236,	256,	276,	295,	315,
	335,	354,	374,	394,	414,	433,	453,	473,
	492,	512,	532,	551,	571,	591,	610,	630,
	650,	670,	689,	709,	729,	748,	768,	788,
	807,	827,	847,	866,	886,	906,	926,	945,
	965,	985,	1004,
};


static const short int_tbl_v203_v255[51] = {
	20,		39,		59,		79,		98,		118,	138,	158,
	177,	197,	217,	236,	256,	276,	295,	315,
	335,	354,	374,	394,	414,	433,	453,	473,
	492,	512,	532,	551,	571,	591,	610,	630,
	650,	670,	689,	709,	729,	748,	768,	788,
	807,	827,	847,	866,	886,	906,	926,	945,
	965,	985,	1004,
};

#endif
